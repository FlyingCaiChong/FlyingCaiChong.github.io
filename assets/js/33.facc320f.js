(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{305:function(v,_,a){"use strict";a.r(_);var t=a(10),e=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"javascript-内存管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript-内存管理"}},[v._v("#")]),v._v(" JavaScript 内存管理")]),v._v(" "),_("h4",{attrs:{id:"认识内存管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#认识内存管理"}},[v._v("#")]),v._v(" 认识内存管理")]),v._v(" "),_("p",[v._v("不管什么样的编程语言, 在代码的执行过程中都是需要给它分配内存的, 不同的是某些编程语言需要我们自己手动的管理内存, 某些编程语言会自动帮助我们管理内存.")]),v._v(" "),_("p",[v._v("不管以什么样的方式来管理内存, 内存的管理都会有如下的生命周期:")]),v._v(" "),_("ol",[_("li",[v._v("分配申请你需要的内存(申请)")]),v._v(" "),_("li",[v._v("使用分配的内存(存放一些东西,比如对象等)")]),v._v(" "),_("li",[v._v("不需要使用时, 对其进行释放")])]),v._v(" "),_("p",[v._v("不同的编程语言对于第一步和第三步会有不同的实现:")]),v._v(" "),_("ul",[_("li",[v._v("手动管理内存: 比如 "),_("code",[v._v("C")]),v._v("、"),_("code",[v._v("C++")]),v._v("、早期的 "),_("code",[v._v("OC")]),v._v(", 都需要手动来管理内存的申请和释放("),_("code",[v._v("malloc")]),v._v(" 和 "),_("code",[v._v("free")]),v._v(" 函数);")]),v._v(" "),_("li",[v._v("自动管理内存: 比如 "),_("code",[v._v("Java")]),v._v("、"),_("code",[v._v("JavaScript")]),v._v("、"),_("code",[v._v("Python")]),v._v("、"),_("code",[v._v("Swift")]),v._v("、"),_("code",[v._v("Dart")]),v._v(" 等, 它们会自动帮助我们管理内存;")])]),v._v(" "),_("p",[_("code",[v._v("JavaScript")]),v._v(" 通常情况下是不需要手动管理的")]),v._v(" "),_("p",[_("code",[v._v("JavaScript")]),v._v(" 在"),_("strong",[v._v("定义变量")]),v._v("的时候就自动分配内存了")]),v._v(" "),_("p",[v._v("内存分配方式:")]),v._v(" "),_("ol",[_("li",[v._v("对于基本数据类型是在栈空间进行分配")]),v._v(" "),_("li",[v._v("对于复杂数据类型是在堆内存中开辟一块空间,并且将这块空间的指针返回值变量引用")])]),v._v(" "),_("h4",{attrs:{id:"js-的垃圾回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js-的垃圾回收"}},[v._v("#")]),v._v(" JS 的垃圾回收")]),v._v(" "),_("p",[v._v("因为内存的大小是有限的,所以当内存不再需要的时候,我们需要对其进行释放,以便腾出更多的内存空间\n在手动管理内存的语言中,我们需要通过一些方式自己来释放不再需要的内存,比如 free 函数:")]),v._v(" "),_("ul",[_("li",[v._v("但是这种管理的方式其实非常的低效,影响我们编写逻辑代码的效率;")]),v._v(" "),_("li",[v._v("并且这种方式对开发者的要求也很高,并且一不小心就会产生内存泄露;")])]),v._v(" "),_("p",[v._v("所以大部分现代的编程语言都是有自己的垃圾回收机制:")]),v._v(" "),_("ul",[_("li",[v._v("垃圾回收的英文是 "),_("code",[v._v("Garbage Collection")]),v._v(", 简称 "),_("code",[v._v("GC")]),v._v(";")]),v._v(" "),_("li",[v._v("对于那些不再使用的对象,我们都称之为垃圾,它需要被回收,以释放更多的内存空间;")]),v._v(" "),_("li",[v._v("而我们的语言运行环境,比如 "),_("code",[v._v("java")]),v._v(" 的运行环境 "),_("code",[v._v("JVM")]),v._v(","),_("code",[v._v("Javascript")]),v._v(" 的运行环境 "),_("code",[v._v("js")]),v._v(" 引擎都会内置垃圾回收器;")]),v._v(" "),_("li",[v._v("垃圾回收器我们也会简称为 "),_("code",[v._v("GC")]),v._v(";")])]),v._v(" "),_("h4",{attrs:{id:"常见的-gc-的算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见的-gc-的算法"}},[v._v("#")]),v._v(" 常见的 GC 的算法")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("引用计数")]),v._v(" "),_("ul",[_("li",[v._v("当一个对象有一个引用指向它时,那么这个对象的引用就+1;当一个对象的引用为 0 时,这个对象就可以被销毁掉;")]),v._v(" "),_("li",[v._v("这个算法有一个很大的弊端就是会产生循环引用;")])])]),v._v(" "),_("li",[_("p",[v._v("标记清除")]),v._v(" "),_("ul",[_("li",[v._v("这个算法是设置一个根对象("),_("code",[v._v("root object")]),v._v("),垃圾回收器会定期从这个根开始,找所有从根开始有引用到的对象,对于哪些没有引用到的对象,就认为是不可用的对象;")]),v._v(" "),_("li",[v._v("这个算法可以很好的解决循环引用的问题;")])])]),v._v(" "),_("li",[_("p",[v._v("JS 引擎比较广泛的采用的就是标记清除的算法")])])])])}),[],!1,null,null,null);_.default=e.exports}}]);